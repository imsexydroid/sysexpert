{
    "uid": "design-airbnb",
    "name": "Design Airbnb",
    "acl": {
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "systemsexpert"
        ],
        "isAvailable": true
    },
    "releaseDate": "2020-09-16T12:00:00-04:00",
    "isReleased": true,
    "video": {
        "vimeoId": "458018356",
        "duration": 0,
        "annotations": [],
        "instructor": "",
        "style": "interview"
    },
    "prompt": "",
    "walkthrough": [
        {
            "title": "Gathering System Requirements",
            "content": "<p>\n  As with any systems design interview question, the first thing that we want to\n  do is to gather system requirements; we need to figure out what system we're\n  building exactly.\n</p>\n<p>\n  We're designing the core system behind Airbnb, which allows hosts to create\n  property listings and renters to browse through these listings and book them.\n</p>\n<p>Specifically, we'll want to support:</p>\n<ul>\n  <li>On the host side, creating and deleting listings.</li>\n  <li>\n    On the renter side, browsing through listings, getting individual listings,\n    and \"reserving\" listings.\n  </li>\n</ul>\n<p>\n  \"Reserving\" listings should happen when a renter presses some \"Book Now\"\n  button and should effectively lock (or reserve) the listing for some\n  predetermined period of time (say, 15 minutes), during which any other renter\n  shouldn't be able to reserve the listing or to even browse it (unless they\n  were already browsing it).\n</p>\n<p>\n  We don't need to support anything that happens after a reservation is made,\n  except for freeing up the reservation after 15 minutes if the renter doesn't\n  follow through with the booking and making the reservation permanent if the\n  renter does actually book the listing in question.\n</p>\n<p>\n  Regarding listings, we should focus on browsing and reserving them based on\n  location and available date range; we can ignore any other property\n  characteristics like price, number of bedrooms, etc.. Browsing listings should\n  be as quick as possible, and it should reflect newly created listings as fast\n  as possible. Lastly, reserved and booked listings shouldn't be browsable by\n  renters.\n</p>\n<p>\n  Our system should serve a U.S.-based audience with approximately 50 million\n  users and 1 million listings.\n</p>"
        },
        {
            "title": "Coming Up With A Plan",
            "content": "<p>We'll tackle this system by dividing it into two main sections:</p>\n<ul>\n  <li>The host side.</li>\n  <li>The renter side.</li>\n</ul>\n<p>We can further divide the renter side as follows:</p>\n<ul>\n  <li>Browsing (listing) listings.</li>\n  <li>Getting a single listing.</li>\n  <li>Reserving a listing.</li>\n</ul>"
        },
        {
            "title": "Listings Storage & Quadtree",
            "content": "<p>\n  First and foremost, we can expect to store all of our listings in a SQL table.\n  This will be our primary source of truth for listings on Airbnb, and whenever\n  a host creates or deletes a listing, this SQL table will be written to.\n</p>\n<p>\n  Then, since we care about the latency of browsing listings on Airbnb, and\n  since this browsing will require querying listings based on their location, we\n  can store our listings in a region quadtree, to be traversed for all browsing\n  functionality.\n</p>\n<p>\n  Since we're optimizing for speed, it'll make sense to store this quadtree in\n  memory on some auxiliary machine, which we can call a \"geo index,\" but we need\n  to make sure that we can actually fit this quadtree in memory.\n</p>\n<p>\n  In this quadtree, we'll need to store all the information about listings that\n  needs to be displayed on the UI when a renter is browsing through listings: a\n  title, a description, a link pointing to a property image, a unique listing\n  ID, etc..\n</p>\n<p>\n  Assuming a single listing takes up roughly 10 KB of space (as an upper bound),\n  some simple math confirms that we can store everything we need about listings\n  in memory.\n</p>\n<pre>\n~10 KB per listing\n~1 million listings\n~10 KB * 1000^2 = 10 GB\n</pre>\n<p>\n  Since we'll be storing our quadtree in memory, we'll want to make sure that a\n  single machine failure doesn't bring down the entire browsing functionality.\n  To ensure this, we can set up a cluster of machines, each holding an instance\n  of our quadtree in memory, and these machines can use leader election to\n  safeguard us from machine failures.\n</p>\n<p>\n  Our quadtree solution works as follows: when our system boots up, the\n  geo-index machines create the quadtree by querying our SQL table of listings.\n  When listings are created or deleted, hosts first write to the SQL table, and\n  then they synchronously update the geo-index leader's quadtree. Then, on an\n  interval of say, 10 minutes, the geo-index leader and followers all recreate\n  the quadtree from the SQL table, which allows them to stay up to date with new\n  listings.\n</p>\n<p>\n  If the leader dies at any point, one of the followers takes its place, and\n  data in the new leader's quadtree will be stale for at most a few minutes\n  until the interval forces the quadtree to be recreated.\n</p>"
        },
        {
            "title": "Listing Listings",
            "content": "<p>\n  When renters browse through listings, they'll have to hit some\n  <i>ListListings</i> API endpoint. This API call will search through the\n  geo-index leader's quadtree for relevant listings based on the location that\n  the renter passes.\n</p>\n<p>\n  Finding relevant locations should be fairly straightforward and very fast,\n  especially since we can estimate that our quadtree will have a depth of\n  approximately 10, since 4^10 is greater than 1 million.\n</p>\n<p>\n  That being said, we'll have to make sure that we don't return listings that\n  are unavailable during the date range specified by the renter. In order to\n  handle this, each listing in the quad tree will contain a list of unavailable\n  date ranges, and we can perform a simple binary search on this list for each\n  listing, in order to determine if the listing in question is available and\n  therefore browsable by the renter.\n</p>\n<p>\n  We can also make sure that our quadtree returns only a subset of relevant\n  listings for pagination purposes, and we can determine this subset by using an\n  offset: the first page of relevant listings would have an offset of 0, the\n  second page would have an offset of 50 (if we wanted pages to have a size of\n  50), the third page would have an offset of 100, and so on and so forth.\n</p>"
        },
        {
            "title": "Getting Individual Listings",
            "content": "<p>\n  This API call should be extremely simple; we can expect to have listing IDs\n  from the list of listings that a renter is browsing through, and we can simply\n  query our SQL table of listings for the given ID.\n</p>"
        },
        {
            "title": "Reserving Listings",
            "content": "<p>\n  Reserved listings will need to be reflected both in our quadtree and in our\n  persistent storage solution. In our quadtree, because they'll have to be\n  excluded from the list of browsable listings; in our persistent storage\n  solution, because if our quadtree needs to have them, then the main source of\n  truth also needs to have them.\n</p>\n<p>\n  We can have a second SQL table for reservations, holding listing IDs as well\n  as date ranges and timestamps for when their reservations expire. When a\n  renter tries to start the booking process of a listing, the reservation table\n  will first be checked to see if there's currently a reservation for the given\n  listing during the specified date range; if there is, an error is returned to\n  the renter; if there isn't, a reservation is made with an expiration timestamp\n  15 minutes into the future.\n</p>\n<p>\n  Following the write to the reservation table, we synchronously update the\n  geo-index leader's quadtree with the new reservation. This new reservation\n  will simply be an unavailability interval in the list of unavailabilities on\n  the relevant listing, but we'll also specify an expiration for this\n  unavailability, since it's a reservation.\n</p>\n<p>A listing in our quadtree might look something like this:</p>\n<pre>\n{\n  \"unavailabilities\": [\n    {\n      \"range\": [\"2020-09-22T12:00:00-05:00\", \"2020-09-28T12:00:00-05:00\"],\n      \"expiration\": \"2020-09-16T12:00:00-04:00\"\n    }\n    {\n      \"range\": [\"2020-10-02T12:00:00-05:00\", \"2020-10-10T12:00:00-05:00\"],\n      \"expiration\": null\n    },\n  ],\n  \"title\": \"Listing Title\",\n  \"description\": \"Listing Description\",\n  \"thumbnailUrl\": \"Listing Thumbnail URL\",\n  \"id\": \"Listing ID\"\n}\n</pre>"
        },
        {
            "title": "Load Balancing",
            "content": "<p>\n  On the host side, we can load balance requests to create and delete listings\n  across a set of API servers using a simple round-robin approach. The API\n  servers will then be in charge of writing to the SQL database and of\n  communicating with the geo-index leader.\n</p>\n<p>\n  On the renter side, we can load balance requests to list, get, and reserve\n  listings across a set of API servers using an API-path-based server-selection\n  strategy. Since workloads for these three API calls will be considerably\n  different from one another, it makes sense to separate these calls across\n  different sets of API servers.\n</p>\n<p>\n  Of note is that we don't want any caching done at our API servers, because\n  otherwise we'll naturally run into stale data as reservations, bookings, and\n  new listings appear.\n</p>"
        },
        {
            "title": "System Diagram",
            "content": "<img\n  width=\"100%\"\n  src=\"https://assets.algoexpert.io/course-assets/systemsexpert/airbnb-system-diagram.svg\"\n  alt=\"Final Systems Architecture\"\n/>"
        }
    ],
    "hints": [
        {
            "question": "Like a lot of other sharing-economy products out there, Airbnb has two sides: a host-facing side and a renter-facing side. Are we designing both of these sides or just one of them?",
            "answer": "Let's design both of these sides of the product."
        },
        {
            "question": "Okay. So we're probably designing the system for hosts to create and maybe delete listings, and the system for renters to browse through properties, book them, and manage their bookings afterwards. Is that correct?",
            "answer": "Yes for hosts; but let's actually just focus on browsing through listings and booking them for renters. We can ignore everything that happens after booking on the renter-facing side."
        },
        {
            "question": "Okay, but for booking, is the idea that, when a user is browsing a property for a specific date range, the property gets temporarily reserved for them if they start the booking process?",
            "answer": "Yes. More specifically, multiple users should be allowed to look at the same property, for the same date range, concurrently without issues. But once a user starts the booking process for a property, it should be reflected that this property is no longer available for the dates in question if another user tries to book it."
        },
        {
            "question": "I see. But so, let's say two users are looking at the exact same property for an overlapping date range, and one user presses \"Book Now\", at which point they have to enter credit card information. Should we immediately lock the property for the other user for some predetermined period of time, like maybe 15 minutes, and if the first person actually goes through with booking the property, then this \"lock\" becomes permanent?",
            "answer": "Yes, that makes sense. In real life, there might be slight differences, but for the sake of this design, let's go with that."
        },
        {
            "question": "Okay. And do we want to design any auxiliary features like being able to contact hosts, authentication and payment services, etc., or are we really just focusing on browsing and reserving?",
            "answer": "Let's really just focus on browsing and booking. We can ignore the rest."
        },
        {
            "question": "I see. So, since it sounds like we're designing a pretty targeted part of the entire Airbnb service, I want to make sure that I know exactly every functionality that we want to support. My understanding is that users can go on the main Airbnb website or app, they can look up properties based on certain criteria, like location, available date range, pricing, property details, etc., and then they can decide to book a location. As for hosts, they can basically just create a listing and delete it like I said earlier. Is that correct?",
            "answer": "Yes. But actually, for this design, let's purely filter based on location and available date range as far as listing characteristics are concerned; let's not worry about other criteria like pricing and property details."
        },
        {
            "question": "What is the scale that we're designing this for? Specifically, roughly how many listings and renters do we expect to cater to?",
            "answer": "Let's only consider Airbnb's U.S. operations. So let's say 50 million users and 1 million listings."
        },
        {
            "question": "Regarding systems characteristics like availability and latency, I'm assuming that, even if a renter looks up properties in a densely-populated area like NYC, where there might be a lot of listings, we care about serving these listings fast, accurately, and reliably. Is that correct?",
            "answer": "Yes, that's correct. Ideally, we don't want any downtime for renters browsing listings."
        }
    ]
}
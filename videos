{"name":"","fundamentals":[{"uid":"introduction","name":"Introduction","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":true,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"Where the coding interview serves primarily as an assessment of your problem-solving ability, the systems design interview is a test of your engineering knowledge veiled behind the facade of an open-ended design question.\n\nWelcome to the crucible of modern software.\n","video":{"vimeoId":"385860724","duration":4,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/855241617-260769e119b1c6ea825d544fff107fc80cb2ff409899f9550e78e2621fd81552-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false},{"uid":"what-are-design-fundamentals","name":"What Are Design Fundamentals?","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":true,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"Building scalable, production-ready applications is both art and science. Science, in that it requires knowledge of many topics in computer engineering; art, in that it demands an eye for making smart design choices and piecing together the right technologies.\n\nMaster both disciplines and you, too, can become a Systems Expert.","video":{"vimeoId":"388787322","duration":8,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/852198998-731584eabbb907fd944479ff3f84e62216e34e847939bfe4ee73f00cb06338eb-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false},{"uid":"client—server-model","name":"Client—Server Model","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"A client is a thing that talks to servers. A server is a thing that talks to clients. The client—server model is a thing made up of a bunch of clients and servers talking to one another.\n\nAnd that, kids, is how the Internet works!\n","video":{"vimeoId":"385524504","duration":15,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/847689305-cdb71c9f899bd7dd860ca3af487645c069ea3ddd1fb26f1a3ded4ecbb2b69655-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[],"keyTerms":[{"name":"Client","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A machine or process that requests data or service from a server.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that a single machine or piece of software can be both a client and a\n  server at the same time. For instance, a single machine could act as a server\n  for end users and as a client for a database.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Server","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A machine or process that provides data or service for a client, usually by\n  listening for incoming network calls.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that a single machine or piece of software can be both a client and a\n  server at the same time. For instance, a single machine could act as a server\n  for end users and as a client for a database.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Client—Server Model","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The paradigm by which modern systems are designed, which consists of clients\n  requesting data or service from servers and servers providing data or service\n  to clients.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"IP Address","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An address given to each machine connected to the public internet. IPv4\n  addresses consist of four numbers separated by dots: \u003cb\u003ea.b.c.d\u003c/b\u003e where all\n  four numbers are between 0 and 255. Special values include:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003e127.0.0.1\u003c/b\u003e: Your own local machine. Also referred to as\n    \u003cb\u003elocalhost\u003c/b\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003e192.168.x.y\u003c/b\u003e: Your private network. For instance, your machine and all\n    machines on your private wifi network will usually have the\n    \u003cb\u003e192.168\u003c/b\u003e prefix.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Port","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  In order for multiple programs to listen for new network connections on the\n  same machine without colliding, they pick a \u003cb\u003eport\u003c/b\u003e to listen on. A port\n  is an integer between 0 and 65,535 (2\u003csup\u003e16\u003c/sup\u003e ports total).\n\u003c/p\u003e\n\u003cp\u003e\n  Typically, ports 0-1023 are reserved for \u003ci\u003esystem ports\u003c/i\u003e (also called\n  \u003ci\u003ewell-known\u003c/i\u003e ports) and shouldn't be used by user-level processes.\n  Certain ports have pre-defined uses, and although you usually won't be\n  required to have them memorized, they can sometimes come in handy. Below are\n  some examples:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e22: Secure Shell\u003c/li\u003e\n  \u003cli\u003e53: DNS lookup\u003c/li\u003e\n  \u003cli\u003e80: HTTP\u003c/li\u003e\n  \u003cli\u003e443: HTTPS\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"DNS","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\nShort for Domain Name System, it describes the entities and protocols involved in the\ntranslation from domain names to IP Addresses. Typically, machines make a DNS query to\na well known entity which is responsible for returning the IP address (or multiple ones)\nof the requested domain name in the response.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":true},{"uid":"network-protocols","name":"Network Protocols","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"IP packets. TCP headers. HTTP requests.\n\nAs daunting as they may seem, these low-level networking concepts are essential to understanding how machines in a system communicate with one another. And as we all know, proper communication is key for thriving relationships!","video":{"vimeoId":"390863139","duration":29,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/855192584-a82c0682bb73df3dcef8b88a93f7599ec8afb85f3186dc6f15b891a33e8ccd71-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Client","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A machine or process that requests data or service from a server.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that a single machine or piece of software can be both a client and a\n  server at the same time. For instance, a single machine could act as a server\n  for end users and as a client for a database.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Server","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A machine or process that provides data or service for a client, usually by\n  listening for incoming network calls.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that a single machine or piece of software can be both a client and a\n  server at the same time. For instance, a single machine could act as a server\n  for end users and as a client for a database.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"IP Address","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An address given to each machine connected to the public internet. IPv4\n  addresses consist of four numbers separated by dots: \u003cb\u003ea.b.c.d\u003c/b\u003e where all\n  four numbers are between 0 and 255. Special values include:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003e127.0.0.1\u003c/b\u003e: Your own local machine. Also referred to as\n    \u003cb\u003elocalhost\u003c/b\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003e192.168.x.y\u003c/b\u003e: Your private network. For instance, your machine and all\n    machines on your private wifi network will usually have the\n    \u003cb\u003e192.168\u003c/b\u003e prefix.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"IP","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Stands for \u003cb\u003eInternet Protocol\u003c/b\u003e. This network protocol outlines how almost\n  all machine-to-machine communications should happen in the world. Other\n  protocols like \u003cb\u003eTCP\u003c/b\u003e, \u003cb\u003eUDP\u003c/b\u003e and \u003cb\u003eHTTP\u003c/b\u003e are built on top of IP.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"TCP","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Network protocol built on top of the Internet Protocol (IP). Allows for\n  ordered, reliable data delivery between machines over the public internet by\n  creating a \u003cb\u003econnection\u003c/b\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  TCP is usually implemented in the kernel, which exposes \u003cb\u003esockets\u003c/b\u003e to\n  applications that they can use to stream data through an open connection.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"HTTP","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The \u003cb\u003eH\u003c/b\u003eyper\u003cb\u003eT\u003c/b\u003eext \u003cb\u003eT\u003c/b\u003eransfer \u003cb\u003eP\u003c/b\u003erotocol is a very common network protocol implemented on top\n  of TCP. Clients make HTTP requests, and servers respond with a response.\n\u003c/p\u003e\n\u003cp\u003e\n  Requests typically have the following schema: \u003cbr /\u003e\n  \u003cpre\u003ehost: string (example: algoexpert.io)\nport: integer (example: 80 or 443)\nmethod: string (example: GET, PUT, POST, DELETE, OPTIONS or PATCH)\nheaders: \u003ckey, value\u003e pair list (example: \"Content-Type\" =\u003e \"application/json\")\nbody: opaque sequence of bytes\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n  Responses typically have the following schema: \u003cbr /\u003e\n  \u003cpre\u003e\nstatus code: integer (example: 200, 401)\nheaders: \u003ckey, value\u003e pair list (example: \"Content-Length\" =\u003e 1238)\nbody: opaque sequence of bytes\u003c/pre\u003e\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"IP Packet","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Sometimes more broadly referred to as just a (network) \u003cb\u003epacket\u003c/b\u003e, an IP\n  packet is effectively the smallest unit used to describe data being sent over\n  \u003cb\u003eIP\u003c/b\u003e, aside from bytes. An IP packet consists of:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    an \u003cb\u003eIP header\u003c/b\u003e, which contains the source and destination\n    \u003cb\u003eIP addresses\u003c/b\u003e as well as other information related to the network\n  \u003c/li\u003e\n  \u003cli\u003ea \u003cb\u003epayload\u003c/b\u003e, which is just the data being sent over the network\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":true},{"uid":"storage","name":"Storage","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"An entire video dedicated just to the storage of data?\n\nYes! Multiple videos, in fact, as you'll see later on when we discuss databases. As it turns out, information storage is an incredibly complex topic that is of vital importance to systems design. \nDon't even think of skipping this lesson!","video":{"vimeoId":"389200103","duration":18,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/852779342-0cb0126ba55034017a75b2215d9a3a77c244e48ea8fcc0c53e2670e61fc0f3b2-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[],"keyTerms":[{"name":"Databases","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Databases are programs that either use disk or memory to do 2 core things:\n  \u003cb\u003erecord\u003c/b\u003e data and \u003cb\u003equery\u003c/b\u003e data. In general, they are themselves\n  servers that are long lived and interact with the rest of your application\n  through network calls, with protocols on top of TCP or even HTTP.\n\u003c/p\u003e\n\u003cp\u003e\n  Some databases only keep records in memory, and the users of such databases\n  are aware of the fact that those records may be lost forever if the machine or\n  process dies.\n\u003c/p\u003e\n\u003cp\u003e\n  For the most part though, databases need persistence of those records, and\n  thus cannot use memory. This means that you have to write your data to disk.\n  Anything written to disk will remain through power loss or network partitions,\n  so that’s what is used to keep permanent records.\n\u003c/p\u003e\n\u003cp\u003e\n  Since machines die often in a large scale system, special disk partitions or\n  volumes are used by the database processes, and those volumes can get\n  recovered even if the machine were to go down permanently.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Disk","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Usually refers to either \u003cb\u003eHDD (hard-disk drive)\u003c/b\u003e or\n  \u003cb\u003eSSD (solid-state drive)\u003c/b\u003e. Data written to disk will persist through\n  power failures and general machine crashes. Disk is also referred to as\n  \u003cb\u003enon-volatile storage\u003c/b\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  SSD is far faster than HDD (see latencies of accessing data from SSD and HDD)\n  but also far more expensive from a financial point of view. Because of that,\n  HDD will typically be used for data that's rarely accessed or updated, but\n  that's stored for a long time, and SSD will be used for data that's frequently\n  accessed and updated.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Memory","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Short for \u003cb\u003eRandom Access Memory (RAM)\u003c/b\u003e. Data stored in memory will be\n  \u003cu\u003elost\u003c/u\u003e when the process that has written that data dies.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Persistent Storage","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Usually refers to disk, but in general it is any form of storage that persists\n  if the process in charge of managing it dies.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":true},{"uid":"latency-and-throughput","name":"Latency And Throughput","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"If you've ever experienced lag in a video game, it was most likely due to a combination of high latency and low throughput. And lag sucks.\n\nIt is therefore your Call of Duty to master these two concepts and to join the crusade against high ping.\n","video":{"vimeoId":"385893803","duration":17,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/848212566-1352b38a15edbade25b4193cca0ff96ec69e18aa6edcc879060fe58a60f771b5-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Disk","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Usually refers to either \u003cb\u003eHDD (hard-disk drive)\u003c/b\u003e or\n  \u003cb\u003eSSD (solid-state drive)\u003c/b\u003e. Data written to disk will persist through\n  power failures and general machine crashes. Disk is also referred to as\n  \u003cb\u003enon-volatile storage\u003c/b\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  SSD is far faster than HDD (see latencies of accessing data from SSD and HDD)\n  but also far more expensive from a financial point of view. Because of that,\n  HDD will typically be used for data that's rarely accessed or updated, but\n  that's stored for a long time, and SSD will be used for data that's frequently\n  accessed and updated.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Memory","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Short for \u003cb\u003eRandom Access Memory (RAM)\u003c/b\u003e. Data stored in memory will be\n  \u003cu\u003elost\u003c/u\u003e when the process that has written that data dies.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Latency","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The time it takes for a certain operation to complete in a system. Most often\n  this measure is a time duration, like milliseconds or seconds. You should know\n  these orders of magnitude:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003cb\u003eReading 1 MB from RAM\u003c/b\u003e: 250 μs (0.25 ms)\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eReading 1 MB from SSD\u003c/b\u003e: 1,000 μs (1 ms)\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eTransfer 1 MB over Network\u003c/b\u003e: 10,000 μs (10 ms)\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eReading 1MB from HDD\u003c/b\u003e: 20,000 μs (20 ms)\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eInter-Continental Round Trip\u003c/b\u003e: 150,000 μs (150 ms)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Throughput","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The number of operations that a system can handle properly per time unit. For\n  instance the throughput of a server can often be measured in requests per\n  second (RPS or QPS).\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"availability","name":"Availability","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"Oops! This content is unavailable right now. Please try again later.\n\n\n\n\nJust kidding! SystemsExpert is a highly available system.","video":{"vimeoId":"388102223","duration":26,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/851269900-a354456c289b4e7f45eaf7e08b22fab55977de32a3ca8548beaddfecb0d5325e-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Process","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A program that is currently running on a machine. You should always assume\n  that any process may get terminated at any time in a sufficiently large\n  system.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Server","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A machine or process that provides data or service for a client, usually by\n  listening for incoming network calls.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that a single machine or piece of software can be both a client and a\n  server at the same time. For instance, a single machine could act as a server\n  for end users and as a client for a database.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Node/Instance/Host","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  These three terms refer to the same thing most of the time: a virtual or\n  physical machine on which the developer runs processes. Sometimes the word\n  \u003cb\u003eserver\u003c/b\u003e also refers to this same concept.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Availability","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The odds of a particular server or service being up and running at any point\n  in time, usually measured in percentages. A server that has 99% availability\n  will be operational 99% of the time (this would be described as having two\n  \u003cb\u003enines\u003c/b\u003e of availability).\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"High Availability","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Used to describe systems that have particularly high levels of availability,\n  typically 5 nines or more; sometimes abbreviated \"HA\".\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Nines","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Typically refers to percentages of uptime. For example, 5 nines of\n  availability means an uptime of 99.999% of the time. Below are the downtimes\n  expected per year depending on those 9s:\n\u003c/p\u003e\n\u003cpre\u003e\n- 99% (two 9s): 87.7 hours\n- 99.9% (three 9s): 8.8 hours\n- 99.99%: 52.6 minutes\n- 99.999%: 5.3 minutes\n\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Redundancy","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The process of replicating parts of a system in an effort to make it more\n  reliable.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"SLA","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Short for \"service-level agreement\", an SLA is a collection of guarantees\n  given to a customer by a service provider. SLAs typically make guarantees on a\n  system's availability, amongst other things. SLAs are made up of one or\n  multiple SLOs.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"SLO","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Short for \"service-level objective\", an SLO is a guarantee given to a customer\n  by a service provider. SLOs typically make guarantees on a system's\n  availability, amongst other things. SLOs constitute an SLA.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"caching","name":"Caching","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"What do a punching bag and a cache have in common?\n\n    \n\n    \nThey can both take a hit!  (ง ͠° ل͜ ͡°)ง\n","video":{"vimeoId":"387513953","duration":28,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/850501401-fed3681135dc5a801d06dff80e0ac39427073d2a16836b66dfbfb7707d9c1f6a-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Latency","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The time it takes for a certain operation to complete in a system. Most often\n  this measure is a time duration, like milliseconds or seconds. You should know\n  these orders of magnitude:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003cb\u003eReading 1 MB from RAM\u003c/b\u003e: 250 μs (0.25 ms)\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eReading 1 MB from SSD\u003c/b\u003e: 1,000 μs (1 ms)\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eTransfer 1 MB over Network\u003c/b\u003e: 10,000 μs (10 ms)\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eReading 1MB from HDD\u003c/b\u003e: 20,000 μs (20 ms)\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eInter-Continental Round Trip\u003c/b\u003e: 150,000 μs (150 ms)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Throughput","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The number of operations that a system can handle properly per time unit. For\n  instance the throughput of a server can often be measured in requests per\n  second (RPS or QPS).\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Memory","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Short for \u003cb\u003eRandom Access Memory (RAM)\u003c/b\u003e. Data stored in memory will be\n  \u003cu\u003elost\u003c/u\u003e when the process that has written that data dies.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Cache","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A piece of hardware or software that stores data, typically meant to retrieve\n  that data faster than otherwise.\n\u003c/p\u003e\n\u003cp\u003e\n  Caches are often used to store responses to network requests as well as\n  results of computationally-long operations.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that data in a cache can become \u003cb\u003estale\u003c/b\u003e if the main source of truth\n  for that data (i.e., the main database behind the cache) gets updated and the\n  cache doesn't.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Cache Hit","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003eWhen requested data is found in a cache.\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Cache Miss","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  When requested data could have been found in a cache but isn't. This is\n  typically used to refer to a negative consequence of a system failure or of a\n  poor design choice. For example:\n\u003c/p\u003e\n\u003cp\u003e\n  \u003ci\u003e\n    If a server goes down, our load balancer will have to forward requests to a\n    new server, which will result in cache misses.\n  \u003c/i\u003e\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Cache Eviction Policy","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The policy by which values get evicted or removed from a cache. Popular cache\n  eviction policies include \u003cb\u003eLRU\u003c/b\u003e (least-recently used), \u003cb\u003eFIFO\u003c/b\u003e (first\n  in first out), and \u003cb\u003eLFU\u003c/b\u003e (least-frequently used).\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Content Delivery Network","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A \u003cb\u003eCDN\u003c/b\u003e is a third-party service that acts like a cache for your servers.\n  Sometimes, web applications can be slow for users in a particular region if\n  your servers are located only in another region. A CDN has servers all around\n  the world, meaning that the latency to a CDN's servers will almost always be\n  far better than the latency to your servers. A CDN's servers are often referred\n  to as \u003cb\u003ePoPs\u003c/b\u003e (Points of Presence). Two of the most popular CDNs are\n  \u003cb\u003eCloudflare\u003c/b\u003e and \u003cb\u003eGoogle Cloud CDN\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":true},{"uid":"proxies","name":"Proxies","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":true,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"Often used by nefarious hackers to conceal their identity and obfuscate their location, these special intermediary servers boast many important real-life applications within the context of caching, access control, and censorship bypassing, amongst other things.","video":{"vimeoId":"387002346","duration":17,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/849787496-ce9fdde09668d131ec4e9f3c4d7bad2b29a10d989fed29a5897640429c1430f6-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Client","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A machine or process that requests data or service from a server.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that a single machine or piece of software can be both a client and a\n  server at the same time. For instance, a single machine could act as a server\n  for end users and as a client for a database.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Server","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A machine or process that provides data or service for a client, usually by\n  listening for incoming network calls.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that a single machine or piece of software can be both a client and a\n  server at the same time. For instance, a single machine could act as a server\n  for end users and as a client for a database.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Forward Proxy","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A server that sits between a client and servers and acts on behalf of the\n  client, typically used to mask the client's identity (IP address). Note that\n  forward proxies are often referred to as just proxies.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Reverse Proxy","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A server that sits between clients and servers and acts on behalf of the\n  servers, typically used for logging, load balancing, or caching.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Nginx","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Pronounced \"engine X\"—not \"N jinx\", Nginx is a very popular webserver that's\n  often used as a \u003cb\u003ereverse proxy\u003c/b\u003e and \u003cb\u003eload balancer\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://www.nginx.com/","kinds":["tech"]}],"section":"","hasCodeExample":true},{"uid":"load-balancers","name":"Load Balancers","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"Relentlessly distributing network requests across multiple servers, these digital traffic cops act as watchful guardians for your system, ensuring that it operates at peak performance day and night.","video":{"vimeoId":"387194182","duration":25,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/850063820-25bffe0c40ceef55d4d6ea8305928cf6a86e8e097d3051e49fb4a797882a5b24-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Reverse Proxy","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A server that sits between clients and servers and acts on behalf of the\n  servers, typically used for logging, load balancing, or caching.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Load Balancer","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A type of \u003cb\u003ereverse proxy\u003c/b\u003e that distributes traffic across servers. Load\n  balancers can be found in many parts of a system, from the DNS layer all the\n  way to the database layer.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Server-Selection Strategy","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  How a \u003cb\u003eload balancer\u003c/b\u003e chooses servers when distributing traffic amongst\n  multiple servers. Commonly used strategies include round-robin, random\n  selection, performance-based selection (choosing the server with the best\n  performance metrics, like the fastest response time or the least amount of\n  traffic), and IP-based routing.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Hot Spot","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  When distributing a workload across a set of servers, that workload might be\n  spread unevenly. This can happen if your \u003cb\u003esharding key\u003c/b\u003e or your \u003cb\u003ehashing function\u003c/b\u003e\n  are suboptimal, or if your workload is naturally skewed: some servers will\n  receive a lot more traffic than others, thus creating a \"hot spot\".\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Nginx","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Pronounced \"engine X\"—not \"N jinx\", Nginx is a very popular webserver that's\n  often used as a \u003cb\u003ereverse proxy\u003c/b\u003e and \u003cb\u003eload balancer\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://www.nginx.com/","kinds":["tech"]}],"section":"","hasCodeExample":true},{"uid":"hashing","name":"Hashing","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"Hashing? Like from hash tables? Should be simple enough, right?\n\nThe good news is that, yes, hashing like from hash tables.\n\nThe bad news is that, no, not simple enough. The video duration and thumbnail should be ominously indicative.\n","video":{"vimeoId":"388541476","duration":38,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/851835312-3047e296a8ac1a173b19f3d71d3db9f97adef82d6a6b6d6afac6eccf2d13cb03-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Hashing Function","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A function that takes in a specific data type (such as a string\n  or an identifier) and outputs a number. Different inputs \u003ci\u003emay\u003c/i\u003e\n  have the same output, but a good hashing function attempts to\n  minimize those \u003cb\u003ehashing collisions\u003c/b\u003e (which is equivalent to\n  maximizing \u003cb\u003euniformity\u003c/b\u003e).\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Load Balancer","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A type of \u003cb\u003ereverse proxy\u003c/b\u003e that distributes traffic across servers. Load\n  balancers can be found in many parts of a system, from the DNS layer all the\n  way to the database layer.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Consistent Hashing","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A type of hashing that minimizes the number of keys that need to be remapped\n  when a hash table gets resized. It's often used by load balancers to\n  distribute traffic to servers; it minimizes the number of requests that get\n  forwarded to different servers when new servers are added or when existing\n  servers are brought down.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Rendezvous Hashing","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A type of hashing also coined \u003cb\u003ehighest random weight\u003c/b\u003e hashing. Allows for\n  minimal re-distribution of mappings when a server goes down.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"SHA","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Short for \"Secure Hash Algorithms\", the SHA is a collection of cryptographic\n  hash functions used in the industry. These days, SHA-3 is a popular choice to\n  use in a system.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":true},{"uid":"relational-databases","name":"Relational Databases","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"Tables and ACID.\n\nNo, we're not describing a drug lord's desk, but rather referring to key properties of relational databases. There's a lot of material to cover here, so hit the play button, kick back, and get ready to store tons of knowledge in the biggest database of them all: your brain.","video":{"vimeoId":"390079322","duration":38,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/854052859-e819b1f1e2dea367e5da38741aec4b4177c3893f437153e51f420e0c24e60525-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Databases","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Databases are programs that either use disk or memory to do 2 core things:\n  \u003cb\u003erecord\u003c/b\u003e data and \u003cb\u003equery\u003c/b\u003e data. In general, they are themselves\n  servers that are long lived and interact with the rest of your application\n  through network calls, with protocols on top of TCP or even HTTP.\n\u003c/p\u003e\n\u003cp\u003e\n  Some databases only keep records in memory, and the users of such databases\n  are aware of the fact that those records may be lost forever if the machine or\n  process dies.\n\u003c/p\u003e\n\u003cp\u003e\n  For the most part though, databases need persistence of those records, and\n  thus cannot use memory. This means that you have to write your data to disk.\n  Anything written to disk will remain through power loss or network partitions,\n  so that’s what is used to keep permanent records.\n\u003c/p\u003e\n\u003cp\u003e\n  Since machines die often in a large scale system, special disk partitions or\n  volumes are used by the database processes, and those volumes can get\n  recovered even if the machine were to go down permanently.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Disk","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Usually refers to either \u003cb\u003eHDD (hard-disk drive)\u003c/b\u003e or\n  \u003cb\u003eSSD (solid-state drive)\u003c/b\u003e. Data written to disk will persist through\n  power failures and general machine crashes. Disk is also referred to as\n  \u003cb\u003enon-volatile storage\u003c/b\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  SSD is far faster than HDD (see latencies of accessing data from SSD and HDD)\n  but also far more expensive from a financial point of view. Because of that,\n  HDD will typically be used for data that's rarely accessed or updated, but\n  that's stored for a long time, and SSD will be used for data that's frequently\n  accessed and updated.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Memory","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Short for \u003cb\u003eRandom Access Memory (RAM)\u003c/b\u003e. Data stored in memory will be\n  \u003cu\u003elost\u003c/u\u003e when the process that has written that data dies.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Relational Database","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A type of structured database in which data is stored following a tabular\n  format; often supports powerful querying using SQL.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Non-Relational Database","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  In contrast with relational database (SQL databases), a type of database that\n  is free of imposed, tabular-like structure. Non-relational databases are often\n  referred to as NoSQL databases.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"SQL","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Structured Query Language. Relational databases can be used using a derivative\n  of SQL such as PostgreSQL in the case of Postgres.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"SQL Database","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Any database that supports SQL. This term is often used synonymously with\n  \"Relational Database\", though in practice, not \u003ci\u003eevery\u003c/i\u003e relational\n  database supports SQL.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"NoSQL Database","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003eAny database that is not SQL-compatible is called NoSQL.\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"ACID Transaction","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A type of database transaction that has four important properties:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003eAtomicity\u003c/b\u003e: The operations that constitute the transaction will either\n    all succeed or all fail. There is no in-between state.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eConsistency\u003c/b\u003e: The transaction cannot bring the database to an invalid\n    state. After the transaction is committed or rolled back, the rules for each\n    record will still apply, and all future transactions will see the effect of\n    the transaction. Also named \u003cb\u003eStrong Consistency\u003c/b\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eIsolation\u003c/b\u003e: The execution of multiple transactions concurrently will\n    have the same effect as if they had been executed sequentially.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eDurability\u003c/b\u003e: Any committed transaction is written to non-volatile\n    storage. It will not be undone by a crash, power loss, or network partition.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Database Index","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A special auxiliary data structure that allows your database to perform\n  certain queries much faster. Indexes can typically only exist to reference\n  structured data, like data stored in relational databases. In practice, you\n  create an index on one or multiple columns in your database to greatly speed\n  up \u003cb\u003eread\u003c/b\u003e queries that you run very often, with the downside of slightly\n  longer \u003cb\u003ewrites\u003c/b\u003e to your database, since writes have to also take place in\n  the relevant index.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Strong Consistency","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\nStrong Consistency usually refers to the consistency of ACID transactions, as opposed to \u003cb\u003eEventual Consistency\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Eventual Consistency","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A consistency model which is unlike \u003cb\u003eStrong Consistency\u003c/b\u003e. In this model,\n  reads might return a view of the system that is stale. An eventually\n  consistent datastore will give guarantees that the state of the database will\n  eventually reflect writes within a time period (could be 10 seconds, or\n  minutes).\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Postgres","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A relational database that uses a dialect of SQL called PostgreSQL. Provides\n  ACID transactions.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://www.postgresql.org/","kinds":["tech"]}],"section":"","hasCodeExample":true},{"uid":"key-value-stores","name":"Key-Value Stores","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"One of the most commonly used NoSQL paradigms today, the key-value store bases its data model on the associative array data type.\n\nThe result? A fast, flexible storage machine that resembles a hash table. That's right folks, our favorite friendly neighborhood data structure strikes again!","video":{"vimeoId":"388933857","duration":11,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/852412937-748a11ca527f9e15ca9aa0fec54584f0d837b0e9d99b8e952173eb86bbb4b54c-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Relational Database","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A type of structured database in which data is stored following a tabular\n  format; often supports powerful querying using SQL.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Non-Relational Database","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  In contrast with relational database (SQL databases), a type of database that\n  is free of imposed, tabular-like structure. Non-relational databases are often\n  referred to as NoSQL databases.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Key-Value Store","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A Key-Value Store is a flexible NoSQL database that's often used for caching\n  and dynamic configuration. Popular options include DynamoDB, Etcd, Redis, and\n  ZooKeeper.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Etcd","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Etcd is a strongly consistent and highly available key-value store that's\n  often used to implement leader election in a system.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://etcd.io/","kinds":["tech"]},{"name":"Redis","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An in-memory key-value store. Does offer some persistent storage options but is\n  typically used as a really fast, best-effort caching solution. Redis is also often\n  used to implement \u003cb\u003erate limiting\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://redis.io/","kinds":["tech"]},{"name":"ZooKeeper","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  ZooKeeper is a strongly consistent, highly available key-value store. It's\n  often used to store important configuration or to perform leader election.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://zookeeper.apache.org/","kinds":["tech"]}],"section":"","hasCodeExample":true},{"uid":"specialized-storage-paradigms","name":"Specialized Storage Paradigms","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"Yup. This is another video about storage.\n\nNope. This isn't the last video about storage.","video":{"vimeoId":"456768635","duration":33,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/955434705-df5f92a3dacd66ace258281c946caf5b2401d1219aa386ee96977c121d1403f1-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Relational Database","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A type of structured database in which data is stored following a tabular\n  format; often supports powerful querying using SQL.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Non-Relational Database","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  In contrast with relational database (SQL databases), a type of database that\n  is free of imposed, tabular-like structure. Non-relational databases are often\n  referred to as NoSQL databases.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"SQL","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Structured Query Language. Relational databases can be used using a derivative\n  of SQL such as PostgreSQL in the case of Postgres.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"SQL Database","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Any database that supports SQL. This term is often used synonymously with\n  \"Relational Database\", though in practice, not \u003ci\u003eevery\u003c/i\u003e relational\n  database supports SQL.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"NoSQL Database","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003eAny database that is not SQL-compatible is called NoSQL.\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Key-Value Store","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A Key-Value Store is a flexible NoSQL database that's often used for caching\n  and dynamic configuration. Popular options include DynamoDB, Etcd, Redis, and\n  ZooKeeper.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Database Index","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A special auxiliary data structure that allows your database to perform\n  certain queries much faster. Indexes can typically only exist to reference\n  structured data, like data stored in relational databases. In practice, you\n  create an index on one or multiple columns in your database to greatly speed\n  up \u003cb\u003eread\u003c/b\u003e queries that you run very often, with the downside of slightly\n  longer \u003cb\u003ewrites\u003c/b\u003e to your database, since writes have to also take place in\n  the relevant index.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Postgres","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A relational database that uses a dialect of SQL called PostgreSQL. Provides\n  ACID transactions.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://www.postgresql.org/","kinds":["tech"]}],"keyTerms":[{"name":"Blob Storage","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Widely used kind of storage, in small and large scale systems. They don’t\n  really count as databases per se, partially because they only allow the user\n  to store and retrieve data based on the name of the blob. This is sort of like\n  a key-value store but usually blob stores have different guarantees. They\n  might be slower than KV stores but values can be megabytes large (or sometimes\n  gigabytes large). Usually people use this to store things like\n  \u003cb\u003elarge binaries, database snapshots, or images\u003c/b\u003e and other static assets\n  that a website might have.\n\u003c/p\u003e\n\u003cp\u003e\n  Blob storage is rather complicated to have on premise, and only giant\n  companies like Google and Amazon have infrastructure that supports it. So\n  usually in the context of System Design interviews you can assume that you\n  will be able to use \u003cb\u003eGCS\u003c/b\u003e or \u003cb\u003eS3\u003c/b\u003e. These are blob storage services\n  hosted by Google and Amazon respectively, that cost money depending on how\n  much storage you use and how often you store and retrieve blobs from that\n  storage.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Time Series Database","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A \u003cb\u003eTSDB\u003c/b\u003e is a special kind of database optimized for storing and\n  analyzing time-indexed data: data points that specifically occur at a given\n  moment in time. Examples of TSDBs are InfluxDB, Prometheus, and Graphite.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Graph Database","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A type of database that stores data following the graph data model. Data\n  entries in a graph database can have explicitly defined relationships, much\n  like nodes in a graph can have edges.\n\u003c/p\u003e\n\u003cp\u003e\n  Graph databases take advantage of their underlying graph structure to perform\n  complex queries on deeply connected data very fast.\n\u003c/p\u003e\n\u003cp\u003e\n  Graph databases are thus often preferred to relational databases when dealing\n  with systems where data points naturally form a graph and have multiple levels\n  of relationships—for example, social networks.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Cypher","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A \u003cb\u003egraph query language\u003c/b\u003e that was originally developed for the Neo4j\n  graph database, but that has since been standardized to be used with other\n  graph databases in an effort to make it the \"SQL for graphs.\"\n\u003c/p\u003e\n\u003cp\u003e\n  Cypher queries are often much simpler than their SQL counterparts. Example\n  Cypher query to find data in \u003cb\u003eNeo4j\u003c/b\u003e, a popular graph database:\n\u003c/p\u003e\n\u003cpre\u003e\nMATCH (some_node:SomeLabel)-[:SOME_RELATIONSHIP]-\u003e(some_other_node:SomeLabel {some_property:'value'})\n\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Spatial Database","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A type of database optimized for storing and querying spatial data like\n  locations on a map. Spatial databases rely on spatial indexes like\n  \u003cb\u003equadtrees\u003c/b\u003e to quickly perform spatial queries like finding all\n  locations in the vicinity of a region.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Quadtree","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A tree data structure most commonly used to index two-dimensional spatial\n  data. Each node in a quadtree has either zero children nodes (and is therefore\n  a leaf node) or exactly four children nodes.\n\u003c/p\u003e\n\u003cp\u003e\n  Typically, quadtree nodes contain some form of spatial data—for example,\n  locations on a map—with a maximum capacity of some specified number \u003cb\u003en\u003c/b\u003e.\n  So long as nodes aren't at capacity, they remain leaf nodes; once they reach\n  capacity, they're given four children nodes, and their data entries are split\n  across the four children nodes.\n\u003c/p\u003e\n\u003cp\u003e\n  A quadtree lends itself well to storing spatial data because it can be\n  represented as a grid filled with rectangles that are recursively subdivided\n  into four sub-rectangles, where each quadtree node is represented by a\n  rectangle and each rectangle represents a spatial region. Assuming we're\n  storing locations in the world, we can imagine a quadtree with a maximum\n  node-capacity \u003cb\u003en\u003c/b\u003e as follows:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    The root node, which represents the entire world, is the outermost\n    rectangle.\n  \u003c/li\u003e\n  \u003cli\u003e\n    If the entire world has more than \u003cb\u003en\u003c/b\u003e locations, the outermost\n    rectangle is divided into four quadrants, each representing a region of the\n    world.\n  \u003c/li\u003e\n  \u003cli\u003e\n    So long as a region has more than \u003cb\u003en\u003c/b\u003e locations, its corresponding\n    rectangle is subdivided into four quadrants (the corresponding node in the\n    quadtree is given four children nodes).\n  \u003c/li\u003e\n  \u003cli\u003e\n    Regions that have fewer than \u003cb\u003en\u003c/b\u003e locations are undivided rectangles\n    (leaf nodes).\n  \u003c/li\u003e\n  \u003cli\u003e\n    The parts of the grid that have many subdivided rectangles represent densely\n    populated areas (like cities), while the parts of the grid that have few\n    subdivided rectangles represent sparsely populated areas (like rural areas).\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  Finding a given location in a perfect quadtree is an extremely fast operation\n  that runs in \u003cb\u003elog\u003csub\u003e4\u003c/sub\u003e(x)\u003c/b\u003e time (where \u003cb\u003ex\u003c/b\u003e is the total\n  number of locations), since quadtree nodes have four children nodes.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Google Cloud Storage","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003eGCS is a blob storage service provided by Google.\u003c/p\u003e\n\u003c/div\u003e","url":"https://cloud.google.com/storage","kinds":["tech"]},{"name":"S3","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  S3 is a blob storage service provided by Amazon through\n  \u003cb\u003eAmazon Web Services (AWS)\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://aws.amazon.com/s3/","kinds":["tech"]},{"name":"InfluxDB","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003eA popular open-source time series database.\u003c/p\u003e\n\u003c/div\u003e","url":"https://www.influxdata.com/","kinds":["tech"]},{"name":"Prometheus","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A popular open-source time series database, typically used for monitoring\n  purposes.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://prometheus.io/","kinds":["tech"]},{"name":"Neo4j","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A popular graph database that consists of \u003cb\u003enodes\u003c/b\u003e, \u003cb\u003erelationships\u003c/b\u003e,\n  \u003cb\u003eproperties\u003c/b\u003e, and \u003cb\u003elabels\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://neo4j.com/","kinds":["tech"]}],"section":"","hasCodeExample":true},{"uid":"replication-and-sharding","name":"Replication And Sharding","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"A system's performance is often only as good as its database's; optimize the latter, and watch as the former improves in tandem!\n\nOn that note, in this video we'll examine how data redundancy and data partitioning techniques can be used to enhance a system's fault tolerance, throughput, and overall reliability.","video":{"vimeoId":"390248030","duration":29,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/854306335-ba664760cecc6b9e3cef6de01507fb7a1bb636cddb2353bd110d496c5718c657-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Availability","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The odds of a particular server or service being up and running at any point\n  in time, usually measured in percentages. A server that has 99% availability\n  will be operational 99% of the time (this would be described as having two\n  \u003cb\u003enines\u003c/b\u003e of availability).\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Latency","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The time it takes for a certain operation to complete in a system. Most often\n  this measure is a time duration, like milliseconds or seconds. You should know\n  these orders of magnitude:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003cb\u003eReading 1 MB from RAM\u003c/b\u003e: 250 μs (0.25 ms)\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eReading 1 MB from SSD\u003c/b\u003e: 1,000 μs (1 ms)\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eTransfer 1 MB over Network\u003c/b\u003e: 10,000 μs (10 ms)\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eReading 1MB from HDD\u003c/b\u003e: 20,000 μs (20 ms)\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eInter-Continental Round Trip\u003c/b\u003e: 150,000 μs (150 ms)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Throughput","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The number of operations that a system can handle properly per time unit. For\n  instance the throughput of a server can often be measured in requests per\n  second (RPS or QPS).\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Redundancy","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The process of replicating parts of a system in an effort to make it more\n  reliable.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Databases","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Databases are programs that either use disk or memory to do 2 core things:\n  \u003cb\u003erecord\u003c/b\u003e data and \u003cb\u003equery\u003c/b\u003e data. In general, they are themselves\n  servers that are long lived and interact with the rest of your application\n  through network calls, with protocols on top of TCP or even HTTP.\n\u003c/p\u003e\n\u003cp\u003e\n  Some databases only keep records in memory, and the users of such databases\n  are aware of the fact that those records may be lost forever if the machine or\n  process dies.\n\u003c/p\u003e\n\u003cp\u003e\n  For the most part though, databases need persistence of those records, and\n  thus cannot use memory. This means that you have to write your data to disk.\n  Anything written to disk will remain through power loss or network partitions,\n  so that’s what is used to keep permanent records.\n\u003c/p\u003e\n\u003cp\u003e\n  Since machines die often in a large scale system, special disk partitions or\n  volumes are used by the database processes, and those volumes can get\n  recovered even if the machine were to go down permanently.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Reverse Proxy","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A server that sits between clients and servers and acts on behalf of the\n  servers, typically used for logging, load balancing, or caching.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Replication","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The act of duplicating the data from one database server to others. This\n  is sometimes used to increase the redundancy of your system and\n  tolerate regional failures for instance. Other times you can use\n  replication to move data closer to your clients, thus decreasing\n  the latency of accessing specific data.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Sharding","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Sometimes called \u003cb\u003edata partitioning\u003c/b\u003e, sharding is the\n  act of splitting a database into two or more pieces called\n  \u003cb\u003eshards\u003c/b\u003e and is typically done to increase the throughput\n  of your database. Popular sharding strategies include:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eSharding based on a client's region\u003c/li\u003e\n  \u003cli\u003eSharding based on the type of data being stored (e.g: user data gets\n      stored in one shard, payments data gets stored in another\n      shard)\u003c/li\u003e\n  \u003cli\u003eSharding based on the hash of a column (only for structured\n      data)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Hot Spot","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  When distributing a workload across a set of servers, that workload might be\n  spread unevenly. This can happen if your \u003cb\u003esharding key\u003c/b\u003e or your \u003cb\u003ehashing function\u003c/b\u003e\n  are suboptimal, or if your workload is naturally skewed: some servers will\n  receive a lot more traffic than others, thus creating a \"hot spot\".\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":true},{"uid":"leader-election","name":"Leader Election","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"Citizens in a society typically elect a leader by voting for their preferred candidate. But how do servers in a distributed system choose a master node? Via algorithms of course!\n\nThis form of algorithmic democracy is known as \"leader election\", though we personally think \"algorithmocracy\" sounds way cooler.\n","video":{"vimeoId":"387241899","duration":30,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/850129513-ea06a3e5f74179e4ed49b9f50c31d7cd1ae0203e64308ecf40df35706f96133a-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Availability","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The odds of a particular server or service being up and running at any point\n  in time, usually measured in percentages. A server that has 99% availability\n  will be operational 99% of the time (this would be described as having two\n  \u003cb\u003enines\u003c/b\u003e of availability).\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"High Availability","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Used to describe systems that have particularly high levels of availability,\n  typically 5 nines or more; sometimes abbreviated \"HA\".\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Redundancy","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The process of replicating parts of a system in an effort to make it more\n  reliable.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Strong Consistency","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\nStrong Consistency usually refers to the consistency of ACID transactions, as opposed to \u003cb\u003eEventual Consistency\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Eventual Consistency","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A consistency model which is unlike \u003cb\u003eStrong Consistency\u003c/b\u003e. In this model,\n  reads might return a view of the system that is stale. An eventually\n  consistent datastore will give guarantees that the state of the database will\n  eventually reflect writes within a time period (could be 10 seconds, or\n  minutes).\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Leader Election","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The process by which nodes in a cluster (for instance, servers in a set of\n  servers) elect a so-called \"leader\" amongst them, responsible for the primary\n  operations of the service that these nodes support. When correctly\n  implemented, leader election guarantees that all nodes in the cluster know\n  which one is the leader at any given time and can elect a new leader if the\n  leader dies for whatever reason.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Consensus Algorithm","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A type of complex algorithms used to have multiple entities agree on a single\n  data value, like who the \"leader\" is amongst a group of machines. Two popular\n  consensus algorithms are \u003cb\u003ePaxos\u003c/b\u003e and \u003cb\u003eRaft\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Paxos \u0026 Raft","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Two consensus algorithms that, when implemented correctly, allow for the\n  synchronization of certain operations, even in a distributed setting.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Etcd","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Etcd is a strongly consistent and highly available key-value store that's\n  often used to implement leader election in a system.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://etcd.io/","kinds":["tech"]},{"name":"ZooKeeper","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  ZooKeeper is a strongly consistent, highly available key-value store. It's\n  often used to store important configuration or to perform leader election.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://zookeeper.apache.org/","kinds":["tech"]}],"section":"","hasCodeExample":true},{"uid":"peer-to-peer-networks","name":"Peer-To-Peer Networks","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"Equality for all.\nSharing is caring.\nUnity makes strength.\nThe more the merrier.\nTeamwork makes the dream work.\nWelcome to peer-to-peer networks!\n","video":{"vimeoId":"388087749","duration":30,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/851245273-58eb7d648c4f4e40c715660144cfe513f45ccb9c52c307bba3d138290d28ee33-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Client—Server Model","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The paradigm by which modern systems are designed, which consists of clients\n  requesting data or service from servers and servers providing data or service\n  to clients.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Throughput","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The number of operations that a system can handle properly per time unit. For\n  instance the throughput of a server can often be measured in requests per\n  second (RPS or QPS).\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Peer-To-Peer Network","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A collection of machines referred to as peers that divide a workload between\n  themselves to presumably complete the workload faster than would otherwise be\n  possible. Peer-to-peer networks are often used in file-distribution systems.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Gossip Protocol","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  When a set of machines talk to each other in a uncoordinated manner in a\n  cluster to spread information through a system without requiring a central\n  source of data.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"polling-and-streaming","name":"Polling And Streaming","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"You can think of polling and streaming kind of like a classroom; sometimes students ask the teacher lots of questions, and other times they quiet down and listen attentively to the teacher's lecture.\n\nNow fire up the video and get ready to stream; you won't be able to poll here. Class is in session!\n","video":{"vimeoId":"388867040","duration":26,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/852315453-1bf75f6c87898cd74223255ece0731ec9bf73ec9ab929d08bdfab4176e720ede-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Client—Server Model","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The paradigm by which modern systems are designed, which consists of clients\n  requesting data or service from servers and servers providing data or service\n  to clients.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Socket","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A kind of file that acts like a stream. Processes can read and write to\n  sockets and communicate in this manner. Most of the time the sockets are\n  fronts for TCP connection.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Polling","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The act of fetching a resource or piece of data regularly at an interval to\n  make sure your data is not too stale.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Streaming","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  In networking, it usually refers to the act of continuously getting a feed of\n  information from a server by keeping an open connection between the two\n  machines or processes.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":true},{"uid":"configuration","name":"Configuration","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"The config file is like the genome of a computer application; it stores parameters that define your system's critical settings, much like your DNA stores the genes that define your physical characteristics.\n\nUnlike its biological counterpart though, the config file is easily editable. No gene therapy needed!\n","video":{"vimeoId":"386402873","duration":13,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/848930916-0d7e2db35ef30eb7e8ec4da0712e06c3244c69a713a8c5bf79449135e4c2a0f1-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"JSON","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003eA file format heavily used in APIs and configuration. Stands for \u003cb\u003eJ\u003c/b\u003eava\u003cb\u003eS\u003c/b\u003ecript \u003cb\u003eO\u003c/b\u003ebject \u003cb\u003eN\u003c/b\u003eotation\u003c/b\u003e. Example:\u003c/p\u003e\n\u003cpre\u003e{\n   \"version\": 1.0,\n   \"name\": \"AlgoExpert Configuration\"\n}\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"YAML","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003eA file format mostly used in configuration. Example:\u003c/p\u003e\n\u003cpre\u003e\nversion: 1.0\nname: AlgoExpert Configuration\n\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Key-Value Store","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A Key-Value Store is a flexible NoSQL database that's often used for caching\n  and dynamic configuration. Popular options include DynamoDB, Etcd, Redis, and\n  ZooKeeper.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Configuration","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A set of parameters or constants that are critical to a system. Configuration\n  is typically written in \u003cb\u003eJSON\u003c/b\u003e or \u003cb\u003eYAML\u003c/b\u003e and can be either \u003cb\u003estatic\u003c/b\u003e, meaning\n  that it's hard-coded in and shipped with your system's application code (like\n  frontend code, for instance), or \u003cb\u003edynamic\u003c/b\u003e, meaning that it lives outside\n  of your system's application code.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":true},{"uid":"rate-limiting","name":"Rate Limiting","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"*Poke*\n*Poke*\n*Poke*\n*Po——*\n\nToo many pokes! You just got rate limited.\n","video":{"vimeoId":"385859779","duration":17,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/848163464-696293e98d24d5751418d90575ec1f3252e382d4581361289abd6480d2c3f5dc-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Availability","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The odds of a particular server or service being up and running at any point\n  in time, usually measured in percentages. A server that has 99% availability\n  will be operational 99% of the time (this would be described as having two\n  \u003cb\u003enines\u003c/b\u003e of availability).\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Key-Value Store","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A Key-Value Store is a flexible NoSQL database that's often used for caching\n  and dynamic configuration. Popular options include DynamoDB, Etcd, Redis, and\n  ZooKeeper.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Rate Limiting","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The act of limiting the number of requests sent to or from a system. Rate\n  limiting is most often used to limit the number of incoming requests in order\n  to prevent \u003cb\u003eDoS attacks\u003c/b\u003e and can be enforced at the IP-address level, at the\n  user-account level, or at the region level, for example. Rate limiting can\n  also be implemented in tiers; for instance, a type of network request could be\n  limited to 1 per second, 5 per 10 seconds, and 10 per minute.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"DoS Attack","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Short for \"denial-of-service attack\", a DoS attack is an attack in which a\n  malicious user tries to bring down or damage a system in order to render it\n  unavailable to users. Much of the time, it consists of flooding it with\n  traffic. Some DoS attacks are easily preventable with rate limiting, while\n  others can be far trickier to defend against.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"DDoS Attack","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Short for \"distributed denial-of-service attack\", a DDoS attack is a DoS\n  attack in which the traffic flooding the target system comes from many\n  different sources (like thousands of machines), making it much harder to\n  defend against.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Redis","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An in-memory key-value store. Does offer some persistent storage options but is\n  typically used as a really fast, best-effort caching solution. Redis is also often\n  used to implement \u003cb\u003erate limiting\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://redis.io/","kinds":["tech"]}],"section":"","hasCodeExample":true},{"uid":"logging-and-monitoring","name":"Logging And Monitoring","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"In order to properly understand and diagnose issues that crop up within a system, it’s critical to have mechanisms in place that create audit trails of various events that occur within said system.\n\nSo go ahead, unleash your inner Orwell and go full Big Brother on your application.\n","video":{"vimeoId":"386654608","duration":12,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/849289123-a831eb5b218ad78bd52a6ca11a5a7870089135fb8443f750dd7fcdd4f44afad9-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"JSON","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003eA file format heavily used in APIs and configuration. Stands for \u003cb\u003eJ\u003c/b\u003eava\u003cb\u003eS\u003c/b\u003ecript \u003cb\u003eO\u003c/b\u003ebject \u003cb\u003eN\u003c/b\u003eotation\u003c/b\u003e. Example:\u003c/p\u003e\n\u003cpre\u003e{\n   \"version\": 1.0,\n   \"name\": \"AlgoExpert Configuration\"\n}\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Logging","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The act of collecting and storing logs--useful information about events in\n  your system. Typically your programs will output log messages to its STDOUT\n  or STDERR pipes, which will automatically get aggregated into a \u003cb\u003ecentralized\n  logging solution\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Monitoring","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The process of having visibility into a system's key metrics, monitoring is\n  typically implemented by collecting important events in a system and\n  aggregating them in human-readable charts.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Alerting","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The process through which system administrators get notified when critical\n  system issues occur. Alerting can be set up by defining specific thresholds\n  on monitoring charts, past which alerts are sent to a communication channel\n  like Slack.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"publish-subscribe-pattern","name":"Publish/Subscribe Pattern","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"Publish/Subscribe. Press/Tug. Produce/Consume. Push/Pull. Send/Receive. Throw/Catch. Thrust/Retrieve.\n\nThree of these can be used interchangeably in the context of systems design. The others cannot.","video":{"vimeoId":"413872495","duration":38,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/886694798-2ecb208a975da2f6621b2cd75b2e8c659822bf7874886d3dc01c70b76b165bee-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Polling","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The act of fetching a resource or piece of data regularly at an interval to\n  make sure your data is not too stale.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Streaming","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  In networking, it usually refers to the act of continuously getting a feed of\n  information from a server by keeping an open connection between the two\n  machines or processes.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Persistent Storage","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Usually refers to disk, but in general it is any form of storage that persists\n  if the process in charge of managing it dies.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Publish/Subscribe Pattern","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Often shortened as \u003cb\u003ePub/Sub\u003c/b\u003e, the Publish/Subscribe pattern is a popular\n  messaging model that consists of \u003cb\u003epublishers\u003c/b\u003e and \u003cb\u003esubscribers\u003c/b\u003e.\n  Publishers publish messages to special \u003cb\u003etopics\u003c/b\u003e (sometimes called\n  \u003cb\u003echannels\u003c/b\u003e) without caring about or even knowing who will read those\n  messages, and subscribers subscribe to topics and read messages coming through\n  those topics.\n\u003c/p\u003e\n\u003cp\u003e\n  Pub/Sub systems often come with very powerful guarantees like\n  \u003cb\u003eat-least-once delivery\u003c/b\u003e, \u003cb\u003epersistent storage\u003c/b\u003e, \n  \u003cb\u003eordering\u003c/b\u003e of messages, and \u003cb\u003ereplayability\u003c/b\u003e of messages.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Idempotent Operation","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An operation that has the same ultimate outcome regardless of how many times\n  it's performed. If an operation can be performed multiple times without\n  changing its overall effect, it's idempotent. Operations performed through a\n  \u003cb\u003ePub/Sub\u003c/b\u003e messaging system typically have to be idempotent, since Pub/Sub\n  systems tend to allow the same messages to be consumed multiple times.\n\u003c/p\u003e\n\u003cp\u003e\n  For example, increasing an integer value in a database is \u003ci\u003enot\u003c/i\u003e an\n  idempotent operation, since repeating this operation will not have the same\n  effect as if it had been performed only once. Conversely, setting a value to\n  \"COMPLETE\" \u003ci\u003eis\u003c/i\u003e an idempotent operation, since repeating this operation\n  will always yield the same result: the value will be \"COMPLETE\".\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Apache Kafka","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A distributed messaging system created by LinkedIn. Very useful\n  when using the \u003cb\u003estreaming\u003c/b\u003e paradigm as opposed to \u003cb\u003epolling\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://kafka.apache.org/","kinds":["tech"]},{"name":"Cloud Pub/Sub","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A highly-scalable Pub/Sub messaging service created by Google. Guarantees\n  \u003cb\u003eat-least-once delivery\u003c/b\u003e of messages and supports \"rewinding\" in order to\n  reprocess messages.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://cloud.google.com/pubsub/","kinds":["tech"]}],"section":"","hasCodeExample":true},{"uid":"mapreduce","name":"MapReduce","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"\"MapReduce is a programming model for processing and generating big data sets with a parallel, distributed algorithm on a cluster.\"\n\nDoes Wikipedia's nebulous definition confuse you? Of course it does. In this video, we'll map out this complex topic and reduce it to clear, easily-understood concepts. See what we did there?  ( ͡~ ͜ʖ ͡°)","video":{"vimeoId":"421310590","duration":37,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/896916985-cb5a3adcc9602f105d9b8732b324cd8a1733323f2bda5bca065c0642be55c8dc-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"File System","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An abstraction over a storage medium that defines how to manage data. While\n  there exist many different types of file systems, most follow a hierarchical\n  structure that consists of directories and files, like the\n  \u003cb\u003eUnix file system\u003c/b\u003e's structure.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Idempotent Operation","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An operation that has the same ultimate outcome regardless of how many times\n  it's performed. If an operation can be performed multiple times without\n  changing its overall effect, it's idempotent. Operations performed through a\n  \u003cb\u003ePub/Sub\u003c/b\u003e messaging system typically have to be idempotent, since Pub/Sub\n  systems tend to allow the same messages to be consumed multiple times.\n\u003c/p\u003e\n\u003cp\u003e\n  For example, increasing an integer value in a database is \u003ci\u003enot\u003c/i\u003e an\n  idempotent operation, since repeating this operation will not have the same\n  effect as if it had been performed only once. Conversely, setting a value to\n  \"COMPLETE\" \u003ci\u003eis\u003c/i\u003e an idempotent operation, since repeating this operation\n  will always yield the same result: the value will be \"COMPLETE\".\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"MapReduce","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A popular framework for processing very large datasets in a distributed\n  setting efficiently, quickly, and in a fault-tolerant manner. A MapReduce job\n  is comprised of 3 main steps:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    the \u003cb\u003eMap\u003c/b\u003e step, which runs a \u003cb\u003emap function\u003c/b\u003e on the various chunks\n    of the dataset and transforms these chunks into intermediate\n    \u003cb\u003ekey-value pairs\u003c/b\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    the \u003cb\u003eShuffle\u003c/b\u003e step, which reorganizes the intermediate\n    \u003cb\u003ekey-value pairs\u003c/b\u003e such that pairs of the same key are routed\n    to the same machine in the final step.\n  \u003c/li\u003e\n  \u003cli\u003e\n    the \u003cb\u003eReduce\u003c/b\u003e step, which runs a \u003cb\u003ereduce function\u003c/b\u003e on the newly\n    shuffled \u003cb\u003ekey-value pairs\u003c/b\u003e and transforms them into more meaningful\n    data.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  The canonical example of a MapReduce use case is counting the number of\n  occurrences of words in a large text file.\n\u003c/p\u003e\n\u003cp\u003e\n  When dealing with a MapReduce library, engineers and/or systems administrators\n  only need to worry about the map and reduce functions, as well as their inputs\n  and outputs. All other concerns, including the parallelization of tasks and\n  the fault-tolerance of the MapReduce job, are abstracted away and taken care\n  of by the MapReduce implementation.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Distributed File System","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A Distributed File System is an abstraction over a (usually large) cluster of\n  machines that allows them to act like one large file system. The two most\n  popular implementations of a DFS are the \u003cb\u003eGoogle File System\u003c/b\u003e (GFS) and\n  the \u003cb\u003eHadoop Distributed File System\u003c/b\u003e (HDFS).\n\u003c/p\u003e\n\u003cp\u003e\n  Typically, DFSs take care of the classic \u003cb\u003eavailability\u003c/b\u003e and\n  \u003cb\u003ereplication\u003c/b\u003e guarantees that can be tricky to obtain in a\n  distributed-system setting. The overarching idea is that files are split into\n  chunks of a certain size (4MB or 64MB, for instance), and those chunks are\n  sharded across a large cluster of machines. A central control plane is in\n  charge of deciding where each chunk resides, routing reads to the right nodes,\n  and handling communication between machines.\n\u003c/p\u003e\n\u003cp\u003e\n  Different DFS implementations have slightly different APIs and semantics, but\n  they achieve the same common goal: extremely large-scale persistent storage.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Hadoop","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A popular, open-source framework that supports MapReduce jobs and many\n  other kinds of data-processing pipelines. Its central component is \u003cb\u003eHDFS\u003c/b\u003e\n  (Hadoop Distributed File System), on top of which other technologies have\n  been developed.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://hadoop.apache.org/","kinds":["tech"]}],"section":"","hasCodeExample":true},{"uid":"security-and-https","name":"Security And HTTPS","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"While network security is of critical importance to virtually any system, it's beyond the scope of most system design interviews.\n\nThat being said, having even a cursory understanding of a few key concepts could very well materialize into the edge you need to ace your interview and secure—pun perhaps intended—a job offer.","video":{"vimeoId":"457651487","duration":36,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/957012171-5753beaf813cf534d830f9650d8b7f5b8babc1224210d7803ed50a272ac648b6-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"Client","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A machine or process that requests data or service from a server.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that a single machine or piece of software can be both a client and a\n  server at the same time. For instance, a single machine could act as a server\n  for end users and as a client for a database.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Server","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A machine or process that provides data or service for a client, usually by\n  listening for incoming network calls.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that a single machine or piece of software can be both a client and a\n  server at the same time. For instance, a single machine could act as a server\n  for end users and as a client for a database.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"IP Packet","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Sometimes more broadly referred to as just a (network) \u003cb\u003epacket\u003c/b\u003e, an IP\n  packet is effectively the smallest unit used to describe data being sent over\n  \u003cb\u003eIP\u003c/b\u003e, aside from bytes. An IP packet consists of:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    an \u003cb\u003eIP header\u003c/b\u003e, which contains the source and destination\n    \u003cb\u003eIP addresses\u003c/b\u003e as well as other information related to the network\n  \u003c/li\u003e\n  \u003cli\u003ea \u003cb\u003epayload\u003c/b\u003e, which is just the data being sent over the network\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"HTTP","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The \u003cb\u003eH\u003c/b\u003eyper\u003cb\u003eT\u003c/b\u003eext \u003cb\u003eT\u003c/b\u003eransfer \u003cb\u003eP\u003c/b\u003erotocol is a very common network protocol implemented on top\n  of TCP. Clients make HTTP requests, and servers respond with a response.\n\u003c/p\u003e\n\u003cp\u003e\n  Requests typically have the following schema: \u003cbr /\u003e\n  \u003cpre\u003ehost: string (example: algoexpert.io)\nport: integer (example: 80 or 443)\nmethod: string (example: GET, PUT, POST, DELETE, OPTIONS or PATCH)\nheaders: \u003ckey, value\u003e pair list (example: \"Content-Type\" =\u003e \"application/json\")\nbody: opaque sequence of bytes\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n  Responses typically have the following schema: \u003cbr /\u003e\n  \u003cpre\u003e\nstatus code: integer (example: 200, 401)\nheaders: \u003ckey, value\u003e pair list (example: \"Content-Length\" =\u003e 1238)\nbody: opaque sequence of bytes\u003c/pre\u003e\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Man-In-The-Middle Attack","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An attack in which the attacker intercepts a line of communication that is\n  thought to be private by its two communicating parties.\n\u003c/p\u003e\n\u003cp\u003e\n  If a malicious actor intercepted and mutated an IP packet on its way from a\n  client to a server, that would be a man-in-the-middle attack.\n\u003c/p\u003e\n\u003cp\u003e\n  MITM attacks are the primary threat that encryption and \u003cb\u003eHTTPS\u003c/b\u003e aim to\n  defend against.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Symmetric Encryption","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A type of encryption that relies on only a single key to both encrypt and\n  decrypt data. The key must be known to all parties involved in communication\n  and must therefore typically be shared between the parties at one point or\n  another.\n\u003c/p\u003e\n\u003cp\u003e\n  Symmetric-key algorithms tend to be faster than their asymmetric counterparts.\n\u003c/p\u003e\n\u003cp\u003e\n  The most widely used symmetric-key algorithms are part of the Advanced\n  Encryption Standard (\u003cb\u003eAES\u003c/b\u003e).\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Asymmetric Encryption","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Also known as public-key encryption, asymmetric encryption relies on two\n  keys—a public key and a private key—to encrypt and decrypt data. The keys are\n  generated using cryptographic algorithms and are mathematically connected such\n  that data encrypted with the public key can only be decrypted with the private\n  key.\n\u003c/p\u003e\n\u003cp\u003e\n  While the private key must be kept secure to maintain the fidelity of this\n  encryption paradigm, the public key can be openly shared.\n\u003c/p\u003e\n\u003cp\u003e\n  Asymmetric-key algorithms tend to be slower than their symmetric counterparts.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"AES","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Stands for \u003cb\u003eAdvanced Encryption Standard\u003c/b\u003e. AES is a widely used\n  encryption standard that has three symmetric-key algorithms (AES-128, AES-192,\n  and AES-256).\n\u003c/p\u003e\n\u003cp\u003e\n  Of note, AES is considered to be the \"gold standard\" in encryption and is even\n  used by the U.S. National Security Agency to encrypt top secret information.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"HTTPS","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The \u003cb\u003eH\u003c/b\u003eyper\u003cb\u003eT\u003c/b\u003eext \u003cb\u003eT\u003c/b\u003eransfer \u003cb\u003eP\u003c/b\u003erotocol \u003cb\u003eS\u003c/b\u003eecure is\n  an extension of \u003cb\u003eHTTP\u003c/b\u003e that's used for secure communication online. It\n  requires servers to have trusted certificates (usually\n  \u003cb\u003eSSL certificates\u003c/b\u003e) and uses the Transport Layer Security (\u003cb\u003eTLS\u003c/b\u003e), a\n  security protocol built on top of \u003cb\u003eTCP\u003c/b\u003e, to encrypt data communicated\n  between a client and a server.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"TLS","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The \u003cb\u003eT\u003c/b\u003eransport \u003cb\u003eL\u003c/b\u003eayer \u003cb\u003eS\u003c/b\u003eecurity is a security protocol over\n  which \u003cb\u003eHTTP\u003c/b\u003e runs in order to achieve secure communication online. \"HTTP\n  over TLS\" is also known as \u003cb\u003eHTTPS\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"SSL Certificate","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A digital certificate granted to a server by a \u003cb\u003ecertificate authority\u003c/b\u003e.\n  Contains the server's public key, to be used as part of the\n  \u003cb\u003eTLS handshake\u003c/b\u003e process in an \u003cb\u003eHTTPS\u003c/b\u003e connection.\n\u003c/p\u003e\n\u003cp\u003e\n  An SSL certificate effectively confirms that a public key belongs to the\n  server claiming it belongs to them. SSL certificates are a crucial defense\n  against \u003cb\u003eman-in-the-middle attacks\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Certificate Authority","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A trusted entity that signs digital certificates—namely, SSL certificates that\n  are relied on in \u003cb\u003eHTTPS\u003c/b\u003e connections.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"TLS Handshake","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The process through which a client and a server communicating over\n  \u003cb\u003eHTTPS\u003c/b\u003e exchange encryption-related information and establish a secure\n  communication. The typical steps in a TLS handshake are roughly as follows:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    The client sends a \u003cb\u003eclient hello\u003c/b\u003e—a string of random bytes—to the\n    server.\n  \u003c/li\u003e\n  \u003cli\u003e\n    The server responds with a \u003cb\u003eserver hello\u003c/b\u003e—another string of random\n    bytes—as well as its \u003cb\u003eSSL certificate\u003c/b\u003e, which contains its\n    \u003cb\u003epublic key\u003c/b\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    The client verifies that the certificate was issued by a\n    \u003cb\u003ecertificate authority\u003c/b\u003e and sends a \u003cb\u003epremaster secret\u003c/b\u003e—yet another\n    string of random bytes, this time encrypted with the server's public key—to\n    the server.\n  \u003c/li\u003e\n  \u003cli\u003e\n    The client and the server use the client hello, the server hello, and the\n    premaster secret to then generate the same \u003cb\u003esymmetric-encryption\u003c/b\u003e session keys,\n    to be used to encrypt and decrypt all data communicated during the remainder\n    of the connection.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":true},{"uid":"api-design","name":"API Design","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["systemsexpert"],"isAvailable":true},"description":"So you've mastered all lessons hitherto on SystemsExpert, and you now feel confident you could ace any systems design interview. That's wonderful and all, but...could you pass an API design interview?\n\nIf you're sweating bullets, then sweat no more. This final video is the last piece of the puzzle you need to become a true Systems Expert.","video":{"vimeoId":"458471340","duration":29,"annotations":[],"instructor":"Clement Mihailescu","thumbnail":"https://i.vimeocdn.com/video/958356995-86861f4a58db37d3204d796be7f835734b734fc73765782de8fe1a3a58f90a31-d_640x360?r=pad"},"questions":[],"references":[],"codeExample":null,"links":null,"preReqs":[{"name":"HTTP","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The \u003cb\u003eH\u003c/b\u003eyper\u003cb\u003eT\u003c/b\u003eext \u003cb\u003eT\u003c/b\u003eransfer \u003cb\u003eP\u003c/b\u003erotocol is a very common network protocol implemented on top\n  of TCP. Clients make HTTP requests, and servers respond with a response.\n\u003c/p\u003e\n\u003cp\u003e\n  Requests typically have the following schema: \u003cbr /\u003e\n  \u003cpre\u003ehost: string (example: algoexpert.io)\nport: integer (example: 80 or 443)\nmethod: string (example: GET, PUT, POST, DELETE, OPTIONS or PATCH)\nheaders: \u003ckey, value\u003e pair list (example: \"Content-Type\" =\u003e \"application/json\")\nbody: opaque sequence of bytes\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n  Responses typically have the following schema: \u003cbr /\u003e\n  \u003cpre\u003e\nstatus code: integer (example: 200, 401)\nheaders: \u003ckey, value\u003e pair list (example: \"Content-Length\" =\u003e 1238)\nbody: opaque sequence of bytes\u003c/pre\u003e\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"JSON","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003eA file format heavily used in APIs and configuration. Stands for \u003cb\u003eJ\u003c/b\u003eava\u003cb\u003eS\u003c/b\u003ecript \u003cb\u003eO\u003c/b\u003ebject \u003cb\u003eN\u003c/b\u003eotation\u003c/b\u003e. Example:\u003c/p\u003e\n\u003cpre\u003e{\n   \"version\": 1.0,\n   \"name\": \"AlgoExpert Configuration\"\n}\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"YAML","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003eA file format mostly used in configuration. Example:\u003c/p\u003e\n\u003cpre\u003e\nversion: 1.0\nname: AlgoExpert Configuration\n\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"ACL","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Short for \u003cb\u003eAccess-Control List\u003c/b\u003e. This term is often used to refer to a\n  permissioning model: which users in a system can perform which operations. For\n  instance, APIs often come with ACLs defining which users can delete, edit, or\n  view certain entities.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"keyTerms":[{"name":"Pagination","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  When a network request potentially warrants a really large response, the\n  relevant API might be designed to return only a single \u003cb\u003epage\u003c/b\u003e\n  of that response (i.e., a limited portion of the response), accompanied by an\n  identifier or token for the client to request the next page if desired.\n\u003c/p\u003e\n\u003cp\u003e\n  Pagination is often used when designing \u003cb\u003eList\u003c/b\u003e endpoints. For instance,\n  an endpoint to list videos on the YouTube Trending page could return a huge\n  list of videos. This wouldn't perform very well on mobile devices due to the\n  lower network speeds and simply wouldn't be optimal, since most users will\n  only ever scroll through the first ten or twenty videos. So, the API could be\n  designed to respond with only the first few videos of that list; in this case,\n  we would say that the API response is \u003cb\u003epaginated\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"CRUD Operations","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Stands for \u003cb\u003eCreate\u003c/b\u003e, \u003cb\u003eRead\u003c/b\u003e, \u003cb\u003eUpdate\u003c/b\u003e,\n  \u003cb\u003eDelete\u003c/b\u003e Operations. These four operations often serve as the bedrock of a\n  functioning system and therefore find themselves at the core of many APIs.\n  The term \u003cb\u003eCRUD\u003c/b\u003e is very likely to come up during an API-design interview.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":true}],"lessons":[]}
